# Default values for gh-ost.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: gh-ost
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {cluster-autoscaler.kubernetes.io/safe-to-evict: "false"}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: NodePort
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3306
  # Optionally specify a nodePort (otherwise Kubernetes will assign one)
  # nodePort: 30080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  exec:
    command:
      - /bin/sh
      - -c
      - "pgrep gh-ost"
readinessProbe:
  exec:
    command:
      - /bin/sh
      - -c
      - "pgrep gh-ost"

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  # minReplicas: 1
  # maxReplicas: 100
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: mycnf
    secret:
      secretName: gh-ost-secret
  - name: ghostlog
    emptyDir: {} # This makes /app/gh-ost.log a directory, not a file
  - name: schematools
    emptyDir: {}
  - name: tmp
    emptyDir: {}
  - name: ghost-scripts
    configMap:
      name: gh-ost-scripts
      defaultMode: 0755

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: mycnf
    mountPath: /root/.my.cnf
    subPath: my.cnf
    readOnly: true
  - name: ghostlog
    mountPath: /app
  - name: schematools
    mountPath: /root/schema_tools
  - name: tmp
    mountPath: /tmp
  - name: ghost-scripts
    mountPath: /root/scripts


# Replace the default command with a shell wrapper
command: ["/bin/bash", "-c"]
args:
  - |
    # Run gh-ost with all arguments
    gh-ost --conf=/root/.my.cnf \
    --max-load=Threads_running=50 \
    --critical-load=Threads_running=1000 \
    --chunk-size=1000 \
    --dml-batch-size=20 \
    --nice-ratio=1 \
    --max-lag-millis=1500 \
    --assume-master-host=192.168.50.75 \
    --host=192.168.50.75 \
    --database=widget_demo \
    --table=WidgetEventLog \
    --verbose \
    --alter="ADD COLUMN ad_distribution VARCHAR(50) COLLATE utf8_unicode_ci DEFAULT NULL, MODIFY COLUMN network VARCHAR(50) COLLATE utf8_unicode_ci NOT NULL" \
    --cut-over=default \
    --exact-rowcount \
    --concurrent-rowcount \
    --default-retries=120 \
    --assume-rbr \
    --allow-on-master \
    --gcp \
    --initially-drop-ghost-table \
    --initially-drop-old-table \
    --panic-flag-file=/root/schema_tools/ghost.panic.flag \
    --postpone-cut-over-flag-file=/root/schema_tools/ghost.postpone.flag \
    --execute 2>&1 | tee /app/gh-ost.log
    EXIT_CODE=${PIPESTATUS[0]}
    echo "gh-ost exited with code $EXIT_CODE"
    if [ -f /app/gh-ost.log ]; then
      echo "--- gh-ost log (first 40 lines) ---"
      head -n 40 /app/gh-ost.log || true
      echo "--- gh-ost log (last 40 lines) ---"
      tail -n 40 /app/gh-ost.log || true
    else
      echo "gh-ost log file not found."
    fi
    exit $EXIT_CODE

# Option 2: Allow override at install time
# helm install gh-ost ./gh-ost --namespace gh-ost --set args="{--conf=/root/.my.cnf,--max-load=Threads_running=10,--alter='ADD COLUMN column_name column_type',--execute}"

# Option 3: Use shell for advanced usage (uncomment below if you want shell features)
# command: ["/bin/sh", "-c"]

# NOTE:
# gh-ost is a one-shot migration tool. When the migration completes, the container exits.
# If using a Deployment, Kubernetes will restart the pod, causing CrashLoopBackOff.
# For one-time migrations, use a Kubernetes Job instead of a Deployment.

# Persistence configuration for PVCs
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 1Gi

# PodDisruptionBudget configuration
pdb:
  enabled: false
  minAvailable: 1
  maxUnavailable: 0

runAsJob: true

secret:
  mycnf: |
    [client]
    user=root
    password=s3cr3t
